" vim:fdm=marker
set nocompatible

call plug#begin('~/.vim/bundle')
  Plug 'tpope/vim-surround' " Adds movement/changes for surrounds
  Plug 'tpope/vim-repeat'
  "
  Plug 'scrooloose/nerdtree'
  Plug 'scrooloose/nerdcommenter'
  
  Plug 'chriskempson/base16-vim'
  Plug 'editorconfig/editorconfig-vim'
 
  Plug 'itchyny/lightline.vim'
  Plug 'mengelbrecht/lightline-bufferline'
  
  Plug 'Valloric/MatchTagAlways'
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
  " language syntax definitions
  " Plug 'sheerun/vim-polyglot'
  " Plug 'jparise/vim-graphql'
  " Does doc generation.
  " Plug 'kkoomen/vim-doge', { 'do': { -> doge#install() } }
  Plug 'kkoomen/vim-doge', { 'dir':'~/code/vantreeseba/vim-doge', 'do': { -> doge#install() } }
  " Does coverage reporting when unit tests exist.
  " Plug 'ruanyl/coverage.vim'
  " viml unit testing
  " Plug 'junegunn/vader.vim'
  
  " Plug 'wellle/targets.vim'
  Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}  " We recommend updating the parsers on update

" Initialize plugin system
call plug#end()

lua <<EOF
local parser_config = require "nvim-treesitter.parsers".get_parser_configs()
parser_config.haxe = {
  install_info = {
    url = "~/code/vantreeseba/tree-sitter-haxe", -- local path or git repo
    files = {"src/parser.c"}
  },
  filetype = "haxe"
}

require'nvim-treesitter.configs'.setup {
  highlight = {
    enable = true,
  },
}
EOF

let g:coc_global_extensions = [ 
      \ 'coc-diagnostic',
      \ 'coc-snippets',
      \ 'coc-git',
      \ 'coc-vimlsp',
      \ 'coc-omnisharp',
      \ 'coc-pairs',
      \ 'coc-json',
      \ 'coc-lists',
      \ 'coc-haxe',
      \ 'coc-perl',
      \ ]

set mouse=a " Enable mouse in all modes
set t_Co=256 " Set terminal to 256 colors.
set t_AB=^[[48;5;%dm
set t_AF=^[[38;5;%dm
let base16colorspace=256
colorscheme base16-monokai

let mapleader=','   "Set the leader key to baus status
set number          " Show line numbers
set showtabline=2   " Always show the tab line
set hidden          " Hide buffers instead of closing and forcing save
set nobackup        " dont create file~ or file.bak
set noswapfile
set nowritebackup
set autoread        " Automatically reload / read files changed outside of vim.

" " Triger `autoread` when files changes on disk
" https://unix.stackexchange.com/questions/149209/refresh-changed-content-of-file-opened-in-vim/383044#383044
" https://vi.stackexchange.com/questions/13692/prevent-focusgained-autocmd-running-in-command-line-editing-mode
autocmd FocusGained,BufEnter,CursorHold,CursorHoldI * if mode() != 'c' | checktime | endif

" Notification after file change
" https://vi.stackexchange.com/questions/13091/autocmd-event-for-autoread
autocmd FileChangedShellPost *
  \ echohl WarningMsg | echo "File changed on disk. Buffer reloaded." | echohl None

set encoding=utf-8
set hlsearch    " Highlight search reasults
set incsearch   " Highlight as you type
set ignorecase  " Ignore case in search.
set smartcase   " Do smart case searching, i.e. /The matches "The", but /the matches both the and The.

set ttyfast     " Tell vim to expect a fast terminal
set lazyredraw

set history=250     " set up a longer history
set undolevels=250  "set up longer undo history
set visualbell
set noerrorbells

set nowrap          " turn off line wrap
set colorcolumn=80  " put a color column at 80 chars

set gdefault        " do global (g) on replace by default
set modeline
set ls=2
set modelines=10

" Set the title in linux to show the current file you're editing.
set title
set titlestring=%F

set updatetime=250 "make cursorhold only trigger after a 250ms pause
autocmd InsertEnter * set timeoutlen=200 ttimeoutlen=200
autocmd InsertLeave * set timeoutlen=1000 ttimeoutlen=1000

nmap <leader><Space> :set list!<CR>
set listchars=tab:↹·,space:␣,eol:↵,trail:␣

"""""" Key Mappings  """"""""
" Make indenting keep selection in visual mode.
vnoremap < <gv
vnoremap > >gv

" Disable the arrow keys like a baus, instead they change window size
nnoremap <Up> <C-W>+
nnoremap <Down> <C-W>-
nnoremap <Left> <C-W><
nnoremap <Right> <C-W>>

" Map capital J/K to jump paragraphs.
nnoremap <silent> J 5j
nnoremap <silent> K 5k
vnoremap <silent> J 5j
vnoremap <silent> K 5k

" Buffer movements.
nnoremap <silent> <C-j> :bp<CR>
nnoremap <silent> <C-k> :bn<CR>
nnoremap <silent> <C-d> :bd<CR>

" map some window movements (ALT + movments)
nmap <silent> <A-k> :wincmd k<CR>
nmap <silent> <A-j> :wincmd j<CR>
nmap <silent> <A-h> :wincmd h<CR>
nmap <silent> <A-l> :wincmd l<CR>

" Pop out of insert and visual modes easily
imap jk <Esc>
imap kj <Esc>
vmap vv <Esc>

" Fat finger fixes
cnoreabbrev W! w!
cnoreabbrev Q! q!
cnoreabbrev Wq wq
cnoreabbrev Wa wa
cnoreabbrev wQ wq
cnoreabbrev WQ wq
cnoreabbrev W w
cnoreabbrev Q q

"make space toggle folds
nnoremap <silent> <Space> @=(foldlevel('.')?'za':'\<Space>')<CR>
vnoremap <Space> zf

"Make pasting work like normal
inoremap <C-v> <C-R>+

"Map loc list actions, goto next error and prev
nmap ge :lnext<CR>
nmap gp :lprev<CR>

nmap <S-Right> :lnext<CR>
nmap <S-Left> :lprev<CR>

"Make shift-tab go to prev jump location (tab goes to next).
nmap <S-TAB> <C-O>

" toggle "smart pasting"
set pastetoggle=<leader>p

"toggle relative numbering
nnoremap <Leader>n :set relativenumber!<cr>
 
""""" FileType Settings  """""
syntax on
set synmaxcol=200
filetype plugin on
filetype plugin indent on
" set foldmethod=manual

set foldmethod=expr
set foldexpr=nvim_treesitter#foldexpr()

au FileType javascript setlocal colorcolumn=100

augroup ft
  au!
  autocmd BufNewFile,BufRead *.graphql set ft=graphql
  autocmd BufNewFile,BufRead *.prisma set ft=graphql
  autocmd BufNewFile,BufRead *.hxml set ft=hxml
  autocmd BufNewFile,BufRead *.hx set ft=haxe
  autocmd BufNewFile,BufRead PULLREQ_EDITMSG set ft=gitcommit
  au FileType vue setlocal ft=javascript.vue
  au FileType js setlocal ft=javascript.js
augroup END

""""""  Custom profiling functions """"""
function! StartProfile()
  :profile start profile.log
  :profile func *
  :profile file *
endfunction

" At this point do slow actions
"
function! StopProfile()
  :profile pause
  :noautocmd qall!
endfunction

""""""" PLUGIN SETTINGS  """""""
" Polyglot

let g:vim_markdown_fenced_languages = ['js=javascript']

" Lightline settings

" Use autocmd to force lightline update on coc change.
autocmd User CocStatusChange,CocDiagnosticChange,CocGitStatusChange call lightline#update()
autocmd User CocGitStatusChange set tabline=%!lightline#tabline()

function! CocErrorCount() abort
  let info = get(b:, 'coc_diagnostic_info', {})
  if empty(info) | return '' | endif
  let msgs = []
  if get(info, 'error', 0)
    call add(msgs, "\uf12a" . info['error'])
  endif
  return join(msgs) 
endfunction

function! CocWarningCount() abort
  let info = get(b:, 'coc_diagnostic_info', {})
  if empty(info) | return '' | endif
  let msgs = []
  if get(info, 'warning', 0)
    call add(msgs, "\uf12a" . info['warning'])
  endif
  return join(msgs) 
endfunction

function! CocGitBranch() abort
  let branch = get(g:, 'coc_git_status', '')
  return branch
endfunction

function! CocGitBlame()
  let blame = get(b:, 'coc_git_blame', '')
  return winwidth(0) > 120 ? blame : blame[0:(winwidth(0)/2) - 3] . '...'
endfunction

set noshowmode
let g:lightline = {
  \ 'colorscheme': 'seoul256',
  \ 'active': {
  \   'left': [[ 'mode', 'paste' ],
  \            [ 'readonly', 'filename'],
  \            [ 'gitbranch']],
  \   'right': [ [ 'cocErrorCount', 'cocWarningCount'],
  \              [ 'lineinfo'],
  \              [ 'fileencoding', 'filetype'],
  \            ]
  \ },
  \ 'component_function': {
  \   'gitbranch': 'CocGitBranch',
  \   'blame': 'CocGitBlame',
  \ },
  \ 'component_expand': {
  \   'cocErrorCount': 'CocErrorCount',
  \   'bufferline': 'LightlineBufferline',
  \   'buffers': 'lightline#bufferline#buffers',
  \   'cocWarningCount': 'CocWarningCount',
  \ },
  \ 'component_type': {
  \   'buffers': 'tabsel',
  \   'cocErrorCount': 'error',
  \   'cocWarningCount': 'warning'
  \ },
  \ 'tabline': {'left': [['buffers']], 'right': [['blame']]},
  \ }

let g:lightline#bufferline#shorten_path=1

" Set colors correctly for coc gutter signs.
hi CocErrorSign ctermfg=9 ctermbg=18
hi CocWarningSign ctermfg=130 ctermbg=18
hi CocInfoSign ctermfg=122 ctermbg=18
hi CocHintSign ctermfg=122 ctermbg=18

hi Folded ctermbg=0 ctermfg=19

" DelimitMate Config
let delimiteMate_jump_expansion = 1
 
" Nerd Commenter mappings
nmap <Leader>c<Space> <Plug>NERDCommenterToggle
vmap <Leader>c<Space> <Plug>NERDCommenterToggle

" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1
" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'
" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1
" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1
" Enable NERDCommenterToggle to check all selected lines is commented or not 
let g:NERDToggleCheckAllLines = 1
" NERDTree configuration 
let g:NERDTreeChDirMode=2
let g:NERDTreeIgnore=['node_modules\.*','\.rbc$', '\~$', '\.pyc$', '\.db$', '\.sqlite$', '__pycache__', '.*\.meta']
let g:NERDTreeSortOrder=['^__\.py$', '\/$', '*', '\.swp$', '\.bak$', '\~$']
let g:NERDTreeShowBookmarks=1
let g:nerdtree_tabs_focus_on_files=1
let g:NERDTreeMapOpenInTabSilent = '<RightMouse>'
let g:NERDTreeWinSize = 20
let g:NERDTreeFileExtensionHighlightFullName = 1

map <leader>t :NERDTreeToggle<CR>
map <leader>f :NERDTreeFind<CR>

"" DoGe Settings
let g:doge_filetype_aliases = {
\  'javascript': ['vue', 'haxe', 'typescript'],
\}

let g:doge_javascript_settings = {
\  'omit_redundant_param_types': 1,
\}

" match tags settings
let g:mta_filetypes = {
  \ 'html.javascript.vue': 1,
  \ 'javascript.vue': 1,
  \ 'javascript.jsx': 1,
  \ 'html' : 1,
  \ 'xhtml' : 1,
  \ 'xml' : 1,
  \ 'jinja' : 1
  \ }

" coc Settings.
let g:coc_snippet_next = '<tab>'

" autocmd CursorHold * silent call CocActionAsync('highlight')
" autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Smart tab mapping
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" navigate chunks of current buffer
nmap [g <Plug>(coc-git-prevchunk)
nmap ]g <Plug>(coc-git-nextchunk)
" show chunk diff at current position
nmap gs <Plug>(coc-git-chunkinfo)
" show commit contains current position
nmap gc <Plug>(coc-git-commit) 
" create text object for git chunks
omap ig <Plug>(coc-git-chunk-inner)
xmap ig <Plug>(coc-git-chunk-inner)
omap ag <Plug>(coc-git-chunk-outer)
xmap ag <Plug>(coc-git-chunk-outer)

" Map keys 
" goto
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Refactoring
nmap <leader>cr <Plug>(coc-rename)
nmap <leader>cf <Plug>(coc-format)
nmap <leader>ch  :call <SID>show_documentation()<CR>
" Add `:Fold` command to fold current buffer.
" command! -nargs=? Fold :call CocActionAsync('fold', <f-args>)

" List actions
nnoremap <leader>al :CocList actions<CR>
nnoremap <leader>l :CocList diagnostics<CR>
" Control P searchs files in CWD.
nnoremap <silent> <C-p> :CocList files<CR>
" Control t searches inside files in CWD.
nnoremap <C-t> :CocList grep<CR>
" Control f searches inside files in CWD for current world cursor is on.
nnoremap <silent> <C-f> :exe 'CocList -I --input='.expand('<cword>').' grep'<CR>

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Do code action for selection in visual mode.
vmap <leader>ac  <Plug>(coc-codeaction-selected)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)
" Fix autofix problem of current line
vmap <leader>qf  <Plug>(coc-fix-selected)


function! s:show_documentation()
  if &filetype == 'vim'
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" 
"" Coverage settings
let g:coverage_sign_covered='C'
let g:coverage_sign_uncovered='U'

function! ToggleShowCoverage()
  if g:coverage_show_covered == 0
    let g:coverage_show_covered=1
    let g:coverage_show_uncovered=1
  else
    let g:coverage_show_covered=0
    let g:coverage_show_uncovered=0
  endif
endfunction

nmap <silent> <leader>sc :call ToggleShowCoverage()<CR>
