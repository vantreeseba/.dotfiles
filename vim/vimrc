" vim:fdm=marker
set nocompatible

" Dein Settings 
if has('vim_starting')
  set runtimepath+=~/.vim/dein/repos/github.com/Shougo/dein.vim
endif


if dein#load_state('~/.vim/bundle')
  call dein#begin(expand('~/.vim/bundle'))
  call dein#add('Shougo/dein.vim')
  call dein#add('wsdjeg/dein-ui.vim')

  call dein#add('konfekt/fastfold')
  call dein#add('tpope/vim-surround')
  call dein#add('scrooloose/nerdtree', {'on_cmd':[
     \ 'NERDTreeToggle',
     \ 'NERDTreeFind'
     \]})
  call dein#add('scrooloose/nerdcommenter')
  call dein#add('chriskempson/base16-vim')
  call dein#add('Raimondi/delimitMate')
  call dein#add('editorconfig/editorconfig-vim')
  call dein#add('ashisha/image.vim')
  call dein#add('itchyny/lightline.vim')
  call dein#add('itchyny/vim-gitbranch')
  call dein#add('mengelbrecht/lightline-bufferline')

  " Toggle quickfix/location list
  call dein#add('Valloric/ListToggle')
  call dein#add('Valloric/MatchTagAlways', {'on_ft': [
    \ 'vue',
    \ 'jsx',
    \ 'html',
    \ 'xhtml',
    \ 'xml' ]})
  call dein#add('mattn/emmet-vim', {'on_ft': [
    \ 'vue',
    \ 'jsx',
    \ 'html',
    \ 'xhtml',
    \ 'xml' ]})

  call dein#add('junegunn/fzf', {'build': 'yes | ./install'})
  call dein#add('junegunn/fzf.vim')
  call dein#add('neoclide/coc.nvim', {'merge': 0, 'build': './install.sh nightly'})
  call dein#add('Shougo/echodoc.vim')

  " Language support
  call dein#add('sheerun/vim-polyglot')
  call dein#add('honza/vim-snippets')
  call dein#add('jparise/vim-graphql')
  call dein#add('darthmall/vim-vue', {'on_ft': ['javascript', 'vue']})
  call dein#add('heavenshell/vim-jsdoc', {'on_ft':['javascript']})

  call dein#add('terryma/vim-multiple-cursors')

  call dein#end()
  call dein#save_state()
endif
" 
" VIM Settings 

set mouse=a " Enable mouse in all modes
let base16colorspace=256
colorscheme base16-monokai

let mapleader=','   "Set the leader key to baus status
set number      " Show line numbers
set showtabline=2 " Always show the tab line

"set autochdir  " set PWD to current opened buffers pwd
set hidden    " Hide buffers instead of closing and forcing save
set nobackup
set noswapfile
set nowritebackup

set hlsearch    " Highlight search reasults
set incsearch   " Highlight as you type
set ignorecase
set smartcase

set ttyfast " Tell vim to expect a fast terminal
set lazyredraw

set history=250 " set up a longer history
set undolevels=250 "set up longer undo history
set visualbell
set noerrorbells

set nowrap      " turn off line wrap
set colorcolumn=80  " put a color column at 80 chars

" do g on replace by default
set gdefault
set modeline
set ls=2
set modelines=10
set title
set titleold=urxvt
set titlestring=%F

set updatetime=500 "make cursorhold only trigger after a 500ms pause

set completeopt-=preview
" set completeopt+=noinsert

"" Set background to none so it's transparent
highlight Normal ctermbg=none
highlight NonText ctermbg=none

nmap <leader><Space> :set list!<CR>
set listchars=tab:↹·,space:␣,eol:↵,trail:␣

" 
" Key Mappings 

" Disable the arrow keys like a baus, instead they change window size
nnoremap <Up> <C-W>+
nnoremap <Down> <C-W>-
nnoremap <Left> <C-W><
nnoremap <Right> <C-W>>

"Add larger paging for vertical movement
nnoremap J 5j
nnoremap K 5k
xnoremap J 5j
xnoremap K 5k

"Buffer movenments.
nnoremap <silent> <C-j> :bp<CR>
nnoremap <silent> <C-k> :bn<CR>
nnoremap <silent> <C-d> :bd<CR>

" map some window movements (ALT + movments)
nmap <silent> <A-k> :wincmd k<CR>
nmap <silent> <A-j> :wincmd j<CR>
nmap <silent> <A-h> :wincmd h<CR>
nmap <silent> <A-l> :wincmd l<CR>

" Pop out of insert and visual modes easily
imap jk <Esc>
imap kj <Esc>
vmap vv <Esc>

" Fat finger fixes
cnoreabbrev W! w!
cnoreabbrev Q! q!
cnoreabbrev Wq wq
cnoreabbrev Wa wa
cnoreabbrev wQ wq
cnoreabbrev WQ wq
cnoreabbrev W w
cnoreabbrev Q q

"make space toggle folds
nnoremap <silent> <Space> @=(foldlevel('.')?'za':'\<Space>')<CR>
vnoremap <Space> zf

"Make pasting work like normal
inoremap <C-v> <C-R>+

"Map loc list actions, goto next error and prev
nmap ge :lnext<CR>
nmap gp :lprev<CR>

"Make shift-tab go to prev jump location (tab goes to next).
nmap <S-TAB> <C-O>

" toggle "smart pasting"
set pastetoggle=<leader>p

"toggle relative numbering
nnoremap <Leader>n :set relativenumber!<cr>
" 
" FileType Settings 
syntax on
set synmaxcol=200
filetype plugin on
filetype plugin indent on

au FileType javascript setlocal colorcolumn=100

augroup ft
  au!
  au FileType vue setlocal ft=javascript.vue
augroup END

augroup folding
  au!
  " au BufReadPre * setlocal foldmethod=indent
  " au BufReadPre *.js setlocal foldmethod=syntax
  " au BufReadPre *.hx setlocal foldmethod=syntax
augroup END

"  Custom profiling functions
function! StartProfile()
  :profile start profile.log
  :profile func *
  :profile file *
endfunction

" At this point do slow actions
"
function! StopProfile()
  :profile pause
  :noautocmd qall!
endfunction


" 
" PLUGIN SETTINGS 

" EditorConfig Settings
" let g:EditorConfig_core_mode = 'python_external'

" Lightline settings
" Customize filename
function! LightlineFileName() 
  let modified = &modified ? '+' : ''
  return &filetype ==# 'fzf' ? 'FZF' :
        \ expand('%:t') !=# '' ? expand('%:t').modified : '[No Name]'.modified
endfunction

function! StatusDiagnostic() abort
  let info = get(b:, 'coc_diagnostic_info', {})
  if empty(info) | return '' | endif
  let msgs = []
  if get(info, 'error', 0)
    call add(msgs, 'E' . info['error'])
  endif
  if get(info, 'warning', 0)
    call add(msgs, 'W' . info['warning'])
  endif
  return join(msgs, ' ') 
endfunction

set noshowmode
let g:lightline = {
  \ 'colorscheme': 'seoul256',
  \ 'active': {
  \   'left': [[ 'mode', 'paste' ],
  \            [ 'gitbranch', 'readonly', 'filename']],
  \   'right': [ [ 'lineinfo', 'cocstatus'],
  \              [ 'percent' ],
  \              [ 'fileformat', 'fileencoding', 'filetype'] ]
  \ },
  \ 'component_function': {
  \   'gitbranch': 'gitbranch#name',
  \   'filename': 'LightlineFileName',
  \   'cocstatus': 'StatusDiagnostic',
  \ },
  \ 'component_expand': {'buffers': 'lightline#bufferline#buffers'},
  \ 'component_type': {'buffers': 'tabsel'},
  \ 'tabline': {'left': [['buffers']], 'right': [[]]}
  \ }

let g:lightline#bufferline#shorten_path=0


" DelimitMate Config
let delimiteMate_jump_expansion = 1
 
" Nerd Commenter mappings
nnoremap <C-/> <Leader>cs<Space>
vnoremap <C-/> <Leader>cs<Space>
inoremap <C-/> <ESC><Leader>cs<Space><CR>i

let g:NERDSpaceDelims = 1
" let g:NERDDefaultAlign = 'left'

"Emmet Settings 
let g:user_emmet_leader_key = '<c-e>'

" NERDTree configuration 
let g:NERDTreeChDirMode=2
let g:NERDTreeIgnore=['node_modules\.*','\.rbc$', '\~$', '\.pyc$', '\.db$', '\.sqlite$', '__pycache__']
let g:NERDTreeSortOrder=['^__\.py$', '\/$', '*', '\.swp$', '\.bak$', '\~$']
let g:NERDTreeShowBookmarks=1
let g:nerdtree_tabs_focus_on_files=1
let g:NERDTreeMapOpenInTabSilent = '<RightMouse>'
let g:NERDTreeWinSize = 20

map <leader>t :NERDTreeToggle<CR>
map <leader>f :NERDTreeFind<CR>
" 
" Git-NerdTree plugin 
let g:NERDTreeIndicatorMapCustom = {
      \ "Modified"  : "~",
      \ "Staged"    : "+",
      \ "Untracked" : "*",
      \ "Renamed"   : "➜",
      \ "Unmerged"  : "",
      \ "Deleted"   : "-",
      \ "Dirty"     : "~",
      \ "Clean"     : "",
      \ "Unknown"   : "?"
      \ }
 
" JsDoc Settings 
let g:jsdoc_allow_input_prompt  = 1
let g:jsdoc_input_description   = 1
let g:jsdoc_underscore_private  = 0
let g:jsdoc_access_descriptions = 0
let g:jsdoc_enable_es6 = 1

let g:jsdoc_tags = {}
let g:jsdoc_tags['returns'] = 'return'

let g:jsdoc_custom_args_hook = {
  \ 'callback\|cb': {
  \   'type': ' {Function} ',
  \   'description': 'Callback function'
  \ }
  \}

nnoremap <silent> <Leader>cd ?function<CR>:nohl<CR><Plug>(JsDoc)
" 
" FZF Settings
command! -bang -nargs=* Find 
      \ call fzf#vim#grep(
      \'rg --column --line-number --no-heading --fixed-strings --smart-case --hidden --follow --glob !.git/* --ignore-file ~/.agignore --color always '
      \.shellescape(<q-args>), 1, <bang>0)

" Jump to buffer if it exists
let g:fzf_buffers_jump = 1

" Setup fzf keymaps
nnoremap <C-p> :Files<cr>
nnoremap <C-t> :Find
nnoremap <C-f> yiw :Find <C-r><C-w><cr>

" match tags settings
let g:mta_filetypes = {
  \ 'html.javascript.vue': 1,
  \ 'javascript.jsx': 1,
  \ 'html' : 1,
  \ 'xhtml' : 1,
  \ 'xml' : 1,
  \ 'jinja' : 1
  \ }

" coc Settings.
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

let g:UltiSnipsExpandTrigger='<Nop>'

inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Map keys 
" goto
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Refactoring
nmap cr <Plug>(coc-rename)
nmap <F2> :call CocActionAsync('format')<CR>
command! Fold :call CocActionAsync('fold')<CR>
nnoremap <F3> :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if &filetype == 'vim'
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" 
" 
